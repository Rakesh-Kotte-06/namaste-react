Episode 1 - Inception - React Basics

‚úÖ What is a CDN Link?
A CDN (Content Delivery Network) link is a way to include external libraries (like React) directly via a URL hosted on a globally distributed server.

‚úÖ What is crossorigin?
crossorigin is an attribute used in script/link tags to handle cross-origin requests and ensure secure fetching of resources like fonts or scripts from other domains.

‚úÖ Difference Between Development React and Production React
Development React: Includes helpful warnings and error messages for debugging.
Production React: Optimized for performance; smaller in size with debugging features removed.

‚úÖ React: Library or Framework?
React is a Library, not a full-fledged framework.
It is designed to build UI components and can be integrated into parts of a webpage (like a header, sidebar, etc.).
React can run independently in a small portion of your app.
It does not take over the entire HTML page‚Äîonly manages the part inside the root element.

React DOM Setup Flow:-

‚úÖ React.createElement()
Creates a React element (JavaScript object), not an HTML element.
Syntax:
React.createElement(tagName, attributes, children)

    Arguments:
        tagName: HTML tag like div, h1, p, etc.
        attributes: Properties like id, className, etc.
        children:
            Can be a single child (React element or string)
            Or multiple children (as an array)

‚úÖ ReactDOM.createRoot(document.getElementById("root"))
Connects React to the actual DOM element with id="root".
Initializes the React app's rendering process.

‚úÖ root.render(<ReactElement>)
Takes the React object created via createElement() (or JSX) and renders it into the DOM.
It replaces any existing content inside the root element.

‚úÖ Why React is Called a Library
React only works within the root element.
The rest of the HTML remains unaffected.
Hence, React can coexist with traditional HTML/CSS/JS.
This modular nature is why React is a library, not a full framework.
=================================================================================================
Episode 2 ‚Äì Igniting Our App üöÄ

‚úÖ Git & GitHub Setup
    Create a new public GitHub repository.
    Set up SSH key for secure communication with GitHub.

Initialize Git in VS code:
    git init

Create or rename branch to main:
    git branch -M main
    
Create a README.md file.

Push code to GitHub:
    git add .
    git commit -m "episode-01"
    git remote add origin git@github.com:<your-username>/<repo-name>.git
    --- git remote add origin https://github.com/Rakesh-Kotte-06/namaste-react.git
        (this step we need to do for once to set up our local to the remote git repository) 
    git push origin main

‚úÖ What is npm?
    npm = Node Package Manager ‚ùå (not an acronym).
    It doesn‚Äôt stand for Node Package Manager but functions as one.
    One of the largest package managers in the world.

‚úÖ npm Initialization

    npm init
    Typical inputs:
        package name: namaste-react
        version: 1.0.0
        description: This is Namaste React by Akshay Saini
        entry point: App.js
        test command: jest
        repository: GitHub URL
        keywords: react, namaste react, akshay saini
        author: Akshay Saini
        license: ISC

‚û°Ô∏è Creates package.json ‚Äì configuration file for npm.

‚úÖ Why package.json?
    Keeps track of all project dependencies.
    Bundlers like Parcel/Webpack are dependencies.
    Needed for:
        Bundling
        Minifying
        Compressing
        Optimizing code for production

‚úÖ Bundlers Overview
    Tools that prepare code for production:
    Parcel, Webpack, Vite
    create-react-app uses Webpack + Babel internally.
    This course uses Parcel (easy to configure).

‚úÖ Installing Parcel
    npm install -D parcel
    -D ‚Üí Development dependency (used only during dev)
    There are two types of dependencies:
    Development dependencies ‚Äì Used in development only.
    Production dependencies ‚Äì Needed in production too.

‚úÖ Versioning Symbols
    ^2.8.3: Allows minor updates, e.g., 2.9.0 (^ caret)
    ~2.8.3: Allows patch updates only (~ tilde)
    >=2.8.3	Allow everything from 2.8.3 and above (including major versions)

    Avoid major updates (3.0.0) unless intentional (they may break your app).

‚úÖ package-lock.json
    Records exact versions of installed packages.
    Includes integrity hashes (SHA512) to ensure consistent installs.
    Ensures:
        Code works the same in local and production.

Always push both:
    package.json
    package-lock.json

‚úÖ node_modules
    Contains actual code of all installed packages.
    Very large and heavy üòÖ
    Should NOT be pushed to GitHub.
    Add to .gitignore

‚úÖ Transitive Dependencies
    A dependency (e.g., Parcel) can have its own dependencies.
    These in turn have more dependencies.
    This tree of dependencies makes node_modules huge.

‚úÖ Running Parcel
    npx parcel index.html
    npx: Executes a local dependency without installing globally.
    Starts a dev server at https://localhost:1234

‚úÖ Why Avoid CDN for React?
    CDN makes network calls (e.g., to unpkg.com) ‚Äì slower.
    With npm install, React and ReactDOM are part of your project.

‚úÖ Installing React Locally
    npm install react react-dom
    In App.js:
        import React from "react";
        import ReactDOM from "react-dom";
        
        If you're getting an import error:
        It's because browser treats app.js as normal JS.
        
        Fix: Add type="module" in script tag(inside index.html file):
        <script type="module" src="app.js"></script>

‚úÖ Parcel Warnings
    In newer versions:

Use:
    import { createRoot } from "react-dom/client";
    Older usage like import from "react-dom" will show warnings.

‚úÖ Parcel Features
    01. Dev Build ‚Äì Creates a development environment with live updates.
    02. Local Server ‚Äì Runs your app locally at localhost:1234.
    03. HMR (Hot Module Replacement) ‚Äì Instantly reflects code changes in the browser without full reload.
    04. File Watching (C++) ‚Äì Tracks changes in files efficiently for quick rebuilds.
    05. Caching ‚Äì Speeds up builds using .parcel-cache.
    06. Image Optimization ‚Äì Reduces image sizes automatically for better performance.
    07. Minification ‚Äì Removes unnecessary code/whitespace for smaller file sizes.
    08. Bundling ‚Äì Combines all files into a single optimized output.
    09. Compression ‚Äì Compresses assets to reduce loading time.
    10. Consistent Hashing ‚Äì Ensures unique file names for cache-busting.
    11. Code Splitting ‚Äì Loads only the required code chunks, improving performance.
    12. Differential Bundling ‚Äì Builds code separately for modern and older browsers.
    13. Diagnostics ‚Äì Displays clean and helpful error messages.
    14. Error Handling ‚Äì Catches and shows errors gracefully during build or runtime.
    15. HTTPS Support ‚Äì Allows running local dev server with HTTPS.
    16. Tree Shaking ‚Äì Removes unused code to reduce bundle size.
    17. Dev/Prod Bundles ‚Äì Generates different builds for development and production use.

‚úÖ Building for Production
    npx parcel build index.html
    Removes old "main": "App.js" from package.json

    Creates optimized dist/ folder with minified code.

‚úÖ .gitignore Best Practices
    Ignore:
        node_modules/
        dist/
        .parcel-cache/

‚úÖ Deployment Workflow
    Push code to GitHub.
    Server pulls the code.
    Server installs dependencies from package.json.
    Server generates its own dist/ folder.
    App gets hosted for end-users.

‚úÖ Browser Compatibility
    To make your app work with older browsers, add this to package.json:

        "browserslist": [
        "last 2 versions"
        ]

    Or more specific:

        "browserslist": [
        "last 2 Chrome versions",
        "last 2 Firefox versions"
        ]

‚úÖ Useful Links:
    Parcel Docs: https://parceljs.org
    Browser support setup: https://browserslist.dev
=========================================================================================================

Episode 3 - Laying the Foundation

üöÄ Setting Up Scripts for Parcel

‚úÖ Dev Build Command:

  ```bash
  npx parcel index.html
  ```

  * Starts development server at `localhost:1234`.
  * `npx` executes local packages.

‚úÖ Using Scripts in `package.json`:**

  ```json
  "scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html"
  }
  ```

  * Run dev server: `npm start` or `npm run start`.
  * Build production bundle: `npm run build`.
  * `start` is a reserved script name; hence `npm start` works directly.

‚öõÔ∏è React.createElement vs JSX

    ‚úÖ Without JSX:

    ```js
        const heading = React.createElement("h1", { id: 'heading' }, "Namaste React");
        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(heading);
    ```

    * `React.createElement` returns a **JavaScript object**, not an HTML element.

    ‚úÖ With JSX:

    ```js
        const jsxHeading = <h1>Namaste React Using JSX</h1>;
    ```

    * JSX is syntactic sugar for `React.createElement()`.
    * Easier to read and write.
    * JSX must be **transpiled** into JavaScript.

üîç What is JSX?

‚úÖ JSX (JavaScript XML):

  * Looks like HTML but is XML-like syntax embedded in JS.
  * Must be **transpiled** by Babel (used internally by Parcel).
  * Not understood by browsers directly.
  * Introduced by **Facebook** in **2013** with React.

‚úÖ Example:

  ```js
    const element = <h1>Hello, world!</h1>;
    // Transpiled to:
    const element = React.createElement("h1", null, "Hello, world!");
  ```

‚úÖ Why Babel?

  * Babel transpiles JSX to valid JavaScript.
  * Enables browser compatibility.

‚úÖ üìù JSX Syntax Rules

    * Use `className` instead of `class`.
    * JSX attributes use **camelCase** (e.g., `tabIndex`, `onClick`).
    * Wrap multiple JSX elements in a single parent (`<div>`, fragment, etc.).

    ```js
        const element = (
        <div>
            <h1>Heading 1</h1>
            <h2>Heading 2</h2>
        </div>
        );
    ```

‚úÖ Components in React

    ‚úÖ What is a Component?
        * Reusable building block of UI.
        * Returns JSX (UI code).
        * Must start with a capital letter.

    ‚úÖ Two Types:
        1. Class-based Components (Old way)
        2. Functional Components (Modern and recommended)

    ‚úÖ Functional Component Example:
        
        ```js
            const Heading = () => <h1>Namaste React</h1>;
        ```

    ‚úÖ Rendering a Component:
        
        ```js
            root.render(<Heading />);
        ```

üß¨ Component Composition
    * Nesting components inside each other.

    ```js
        const Name = () => <h2>Rakesh Kotte</h2>;

        const Title = () => (
            <div>
                <h1>Namaste React</h1>
                <Name />
            </div>
        );
    ```
    * Can also define components using `function` keyword, but `arrow functions` are preferred.

    ```js
        const Title = function () {
            return (
                <h2>By Akshay Saini</h2>
            );
        };
    ```

üîÑ Embedding JavaScript in JSX
    
    * Use `{}` to insert JS expressions inside JSX.
    ```js
        const number = 10000;
        const Info = () => <h2>Total Views: {number}</h2>;
    ```
    * You can even embed React elements and function calls:

    ```js
        {Title()}
    ```

üõ°Ô∏è JSX Security - Sanitization

    * JSX **escapes and sanitizes** data by default.
    * Prevents XSS (Cross-Site Scripting) attacks.

    Example:
    ```js
        const data = '<script>alert("Hacked!")</script>';
        const Title = () => (
            <div>
                <h2>By Akshay Saini</h2>
                {data} // Rendered as plain text, not executed
            </div>
        );
    ```

* JSX uses `textContent` (not `innerHTML`), so it's secure by default.
* **Only dangerous method:** `dangerouslySetInnerHTML` (use cautiously)

‚úÖ Summary
    * JSX is a powerful syntax introduced by Facebook to simplify UI creation.
    * Parcel + Babel transpile JSX to valid JavaScript.
    * Components are building blocks in React.
    * Use arrow functions and PascalCase for components.
    * JSX automatically protects against malicious code unless explicitly told not to.

‚úÖ JSX is developer-friendly but must be written carefully following syntax rules and security best practices.
